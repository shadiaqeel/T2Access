@model T2Access.Models.SignUpUserModel
@using T2Access.Web.Helper


@using T2Access.Web.Resources

@{
    ViewBag.Title = "Create";
}




    <form asp-controller="User" asp-action="Create" method="post" onsubmit="return CreateUser(this)" role="form">
        @Html.AntiForgeryToken()


        <div class="form form-panel ">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
                {<p class="alert alert-danger" role="alert">@ViewBag.ErrorMessage</p>}
                <div class="row mt">
                    <div class="form-group col-md-12 ">
                        @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row mt">
                    <div class="form-group col-md-6  ">
                        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "col-md-12" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-6 ">
                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>


                <div class="row mt">
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-6 ">
                        @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>






                <div class="mt">
                    <div class="form-group form-panel  ">
                        <h6>@Resource.Gates</h6>
                        <div class="centered">
                            @Html.HiddenFor(model => model.AddedGateList)

                            @*@Html.Action("GetList", "Gate")*@
                            @await Component.InvokeAsync("GetGateList")
                            @*<vc:get-gate-list></vc:get-gate-list>*@
                        </div>
                    </div>



                    <div class="form-group centered ">
                        <div>
                            <hr />
                            <input type="submit" value=@Resource.Create class="btn btn-primary  btn-lg    " />
                            @Html.ActionLink(Resource.Back, "UserManagment", "User", null, new { @class = "btn btn-dark btn-lg  " })

                        </div>
                    </div>
                </div>
            </div>
        </div>

        </form>



        @section Scripts
  {


           @*@Html.RegisteredScripts()*@

            <script>

    var selectedGuid = [];


        $(document).ready(function () {

            selectedGuid = $('#AddedGateList')[0].value?.split(',') || [];

             $("#GTable").DataTable({
                serverSide: true,
                bPaginate: true,
                iDisplayLength: 12,
                "pageLength": 10,
                ajax: function (data, callback, settings) {

                    // data.length = 10;
                    $.post("@Url.Action("GetFiltered", "Gate")", data, function (result) {


                        callback({
                            draw: result.draw,
                            data: result.data,
                            recordsTotal: result.recordsTotal,
                            recordsFiltered: result.recordsFiltered
                        });
                        // $("#tbodyPartial").html(result.view);

                    });

                },
                stateSave: true,
                deferRender: true,
                ordering: false,
                bFilter: true,
                bInfo: true,
                bAutoWidth: true,
                bSortable: true,
                scrollY: "50vh",
                sScrollX: "90%",
                scrollCollapse: true,
                //multiSelect: false,
                aaSorting: false,
                //sDom: 'frtiS',
                scroller: {
                    loadingIndicator: true
                },
                 rowCallback: function (row, data) {
                     $(row).attr("id", data["Id"]);
                    if ($.inArray(data.Id, selectedGuid) !== -1) {
                        $(row).addClass('selected');
                    }
                }
                ,
                columns: [
                    {
                        data: null,
                        defaultContent: '',
                        orderable: false,
                        width: "1%",
                        className: 'select-checkbox',
                        checkboxes: { selectRow: true },

                    },
                    { data: "nameAr", name: "NameAr", autoWidth: true },
                    { data: "nameEn", name: "NameEn", autoWidth: true }
                ],
                //select: {
                //    style: 'multi',
                //    selector: 'td'

                //},
                preDrawCallback: function () {

                    $('div.dataTables_filter input').addClass("form-control form-control-sm");
                    $('div.dataTables_filter').addClass("pull-away");

                },
                language:
                {
                    "search": "@Resource.Search   ",
                    "sZeroRecords": "@Resource.NotFound",
                    sLoadingRecords: "Loading...",
                    info: "@Resource.SInfoTable"

                }


            });


            $('#GTable tbody').on('click', 'tr', function () {

                var id = this.id;
                var index = $.inArray(id, selectedGuid);

                if (index === -1) {
                    selectedGuid.push(id);
                } else {

                    selectedGuid.splice(index, 1);
                }

                $(this).toggleClass('selected');
            });





        });




    var CreateUser = function (form) {

        //var form = $("form",this);
        //var table = $("#GTable").DataTable();
        //var rowsel = table.rows('.selected').indexes();
        //var rowsell = table.column(0).checkboxes.selected();
        //var selectedGuid = [];
        //$.each(rowsel, function (index, rowId) {
        //    selectedGuid.push(table.rows(rowId).nodes().to$().find("input[type='hidden']").attr("value"));
        //});


        form.AddedGateList.value = selectedGuid.toString();
        debugger
        return true;

    }



            </script>



        }








